// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @unique @default(uuid())
  email       String       @unique
  displayName String
  phoneNumber String?
  address     String?
  country     String?
  state       String?
  city        String?
  zipCode     String?
  about       String?
  specialty   String?
  permissions Permission[]
  requests    Request[]   @relation("requester")
  queues      Queue[]
  takenRequests Request[] @relation("TA")
}

model Permission {
  id       String  @id @unique @default(uuid())
  course   Course  @relation(fields: [courseId], references: [id])
  courseId String  
  user     User    @relation(fields: [userId], references: [id])
  userId   String  
  role     Role    @default(STUDENT)

  @@unique([userId, courseId])
}

model Course {
  id            String          @id @unique
  name          String
  year          String
  term          String
  title         String?
  queues        Queue[]
  erc           EnrollmentCode?
  permissions   Permission[]
}

model Queue {
  id         String    @id @unique @default(uuid())
  course     Course    @relation(fields: [courseId], references: [id])
  courseId   String
  courseCode String?
  requests   Request[]
  isOpen     Boolean   @default(false)
  owner      User      @relation(fields: [userId], references: [id])
  startTime  DateTime?
  endTime    DateTime?
  userId     String
  helpers    String[]
}

model Request {
  id          String   @id @unique @default(uuid())
  info        String?
  displayName String
  problemType Int?
  status      RequestStatus @default(WAITING)
  joined      Boolean  @default(false)
  timeJoined  DateTime @default(now())
  timeTaken   DateTime?
  timeClosed  DateTime?
  queue       Queue    @relation(fields: [queueId], references: [id])
  queueId     String
  user        User     @relation("requester", fields: [userId], references: [id])
  userId      String
  helper      User?     @relation("TA", fields: [helperId], references: [id])
  helperId    String?
}

model EnrollmentCode {
  id       String   @id @unique
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String   @unique
  expires  DateTime
}

enum Role {
  ADMIN
  HELPER
  STUDENT
}

enum RequestStatus {
  WAITING
  IN_PROGRESS
  DONE
}